version: '3.8'

services:
  frontend:
    build:
      context: .  # Build the frontend from the root folder
      dockerfile: Dockerfile  # Dockerfile for the frontend
    ports:
      - "3000:80"  # Expose the frontend on port 8080
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}  # Pass API URL to the frontend
    networks:
      - app-network
    depends_on:
      - backend  # Ensure backend starts before frontend

  backend:
    build:
      context: ./backend  # Build the backend from the 'backend' folder
      dockerfile: Dockerfile  # Use the backend Dockerfile
    ports:
      - "5000:5000"  # Expose the Flask backend on port 5000
    environment:
      - FLASK_APP=app.py  # Specify the Flask app file
      - FLASK_RUN_HOST=0.0.0.0  # Listen on all interfaces
      - FLASK_ENV=development  # Development mode for Flask
      - MYSQL_USER=${DB_USER}  # This should be 'feng' based on the output
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_HOST=${DB_HOST}
    env_file:
      - .env 
    networks:
      - app-network
    depends_on:
      - mysql  # Ensure MySQL starts before backend

  mysql:
    image: mysql:8.0  # Use MySQL 8.0 image
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}  # Root password from .env
      - MYSQL_DATABASE=${DB_NAME}  # Database name from .env
      - MYSQL_USER=${DB_USER}  # MySQL user from .env
      - MYSQL_PASSWORD=${DB_PASSWORD}  # MySQL user password from .env
    ports:
      - "3305:3306"  # Expose MySQL on port 3306
    volumes:
      - mysql_data:/var/lib/mysql  # Persistent data storage
      - ./exampledb_dump.sql:/docker-entrypoint-initdb.d/exampledb_dump.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysql", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}", "-h", "mysql", "-e", "SELECT 1;"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s


volumes:
  mysql_data:
    driver: local  # Use a local volume for MySQL data

networks:
  app-network:
    driver: bridge  # Use the bridge network for container communication
